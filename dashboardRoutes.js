const express = require('express');
const router = express.Router();
const dashboardController = require('../controllers/dashboardController');
const bitrixService = require('../bitrix/bitrixService');

// –†–æ—É—Ç—ã –¥–∞—à–±–æ—Ä–¥–∞
router.get('/sources', dashboardController.getSources);
router.post('/sync-sources', dashboardController.syncSources);
router.get('/leads-analytics', dashboardController.getLeadsAnalytics);
router.get('/lead-stages', dashboardController.getLeadStages);
router.post('/fix-source-ids', dashboardController.fixSourceIds);

// –ù–û–í–´–ô —Ä–æ—É—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ—Ä–æ–Ω–æ–∫ —Å–¥–µ–ª–æ–∫
//router.get('/deal-categories', dashboardController.getDealCategories);

// –ù–û–í–´–ô –†–û–£–¢ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
router.get('/employees-analytics', dashboardController.getEmployeesAnalytics);

// API —Ä–æ—É—Ç –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂
router.get('/sales', dashboardController.getSalesAnalytics);

// üß™ –¢–ï–°–¢–û–í–´–ô –†–û–£–¢ –î–õ–Ø –°–´–†–´–• –î–ê–ù–ù–´–• –ü–†–û–î–ê–ñ
// –î–æ–±–∞–≤–∏—Ç—å –≤ /home/cab/routes/dashboardRoutes.js

// –¢–µ—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
router.get('/test-raw-sales', async (req, res) => {
  try {
    console.log('üß™ –¢–ï–°–¢: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ —Å–¥–µ–ª–∫–∏ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const rawSales = await bitrixService.getDeals({
      'CATEGORY_ID': '31',     // –í–æ—Ä–æ–Ω–∫–∞ "–î–æ–≥–æ–≤–æ—Ä"
      'STAGE_ID': 'C31:WON',  // –°—Ç–∞–¥–∏—è "–í–Ω–µ—Å–µ–Ω–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞"
      '>=DATE_CREATE': '2025-06-01T00:00:00',
      '<=DATE_CREATE': '2025-06-07T23:59:59'
    });
    
    console.log(`üß™ –ù–∞–π–¥–µ–Ω–æ —Å—ã—Ä—ã—Ö –ø—Ä–æ–¥–∞–∂: ${rawSales?.length || 0}`);
    
    if (!rawSales || rawSales.length === 0) {
      return res.json({
        success: true,
        message: '–ù–µ—Ç –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–µ—Ä–∏–æ–¥',
        count: 0,
        data: []
      });
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    const fieldAnalysis = {};
    const sampleSales = rawSales.slice(0, 5); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    
    rawSales.forEach(sale => {
      Object.keys(sale).forEach(field => {
        if (!fieldAnalysis[field]) {
          fieldAnalysis[field] = {
            count: 0,
            hasValue: 0,
            sampleValues: []
          };
        }
        fieldAnalysis[field].count++;
        if (sale[field] && sale[field] !== '' && sale[field] !== null) {
          fieldAnalysis[field].hasValue++;
          if (fieldAnalysis[field].sampleValues.length < 3) {
            fieldAnalysis[field].sampleValues.push(sale[field]);
          }
        }
      });
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º –ø–æ–ª—è–º
    const keyFields = ['LEAD_ID', 'CONTACT_ID', 'UF_CRM_LEAD_ID', 'ORIGINATOR_ID'];
    const keyFieldsStats = {};
    
    keyFields.forEach(field => {
      const withValue = rawSales.filter(sale => sale[field] && sale[field] !== '' && sale[field] !== null);
      keyFieldsStats[field] = {
        total: rawSales.length,
        withValue: withValue.length,
        percentage: rawSales.length > 0 ? Math.round((withValue.length / rawSales.length) * 100) : 0,
        sampleValues: withValue.slice(0, 3).map(sale => sale[field])
      };
    });
    
    console.log('üß™ –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π:');
    Object.entries(keyFieldsStats).forEach(([field, stats]) => {
      console.log(`  ${field}: ${stats.withValue}/${stats.total} (${stats.percentage}%)`);
    });
    
    res.json({
      success: true,
      totalSales: rawSales.length,
      period: '2025-06-01 ‚Äî 2025-06-07',
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º –ø–æ–ª—è–º —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
      linkingFieldsAnalysis: keyFieldsStats,
      
      // –í—Å–µ –ø–æ–ª—è –∏ –∏—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å
      allFieldsAnalysis: Object.fromEntries(
        Object.entries(fieldAnalysis)
          .sort(([,a], [,b]) => b.hasValue - a.hasValue)
          .slice(0, 20) // –¢–æ–ø-20 –Ω–∞–∏–±–æ–ª–µ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
      ),
      
      // –ü—Ä–∏–º–µ—Ä—ã —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      sampleSales: sampleSales.map(sale => ({
        ID: sale.ID,
        TITLE: sale.TITLE,
        LEAD_ID: sale.LEAD_ID,
        CONTACT_ID: sale.CONTACT_ID,
        UF_CRM_LEAD_ID: sale.UF_CRM_LEAD_ID,
        ORIGINATOR_ID: sale.ORIGINATOR_ID,
        OPPORTUNITY: sale.OPPORTUNITY,
        DATE_CREATE: sale.DATE_CREATE,
        ASSIGNED_BY_ID: sale.ASSIGNED_BY_ID
      })),
      
      // –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–π —Å–¥–µ–ª–∫–∏
      firstSaleFullStructure: rawSales[0]
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–æ—É—Ç–∞ —Å—ã—Ä—ã—Ö –ø—Ä–æ–¥–∞–∂:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// üß™ –¢–ê–ö–ñ–ï –î–û–ë–ê–í–ò–¢–¨ –í module.exports –í –ö–û–ù–¶–ï –§–ê–ô–õ–ê:
// –ù–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ exports - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ä–æ—É—Ç

module.exports = router;