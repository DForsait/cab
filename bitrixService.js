// bitrix/bitrixService.js - OAuth –≤–µ—Ä—Å–∏—è —Å –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
const axios = require('axios');
const bitrixTokenManager = require('../utils/bitrixTokenManager');

/**
 * –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Bitrix24 —á–µ—Ä–µ–∑ OAuth
 */
async function bitrixRequest(method, params = {}) {
  try {
    const accessToken = await bitrixTokenManager.getAccessToken();
    const tokenData = bitrixTokenManager.getTokenData();
    
    const url = `${tokenData.client_endpoint}${method}`;
    
    const response = await axios.post(url, {
      ...params,
      auth: accessToken // OAuth —Ç–æ–∫–µ–Ω
    });

    if (response.data.error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ Bitrix API [${method}]:`, response.data.error_description);
      throw new Error(`Bitrix API Error: ${response.data.error_description}`);
    }

    return response.data;

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ bitrixRequest [${method}]:`, error.message);
    
    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ - –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
    if (error.response?.status === 401) {
      console.log('üîÑ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º...');
      await bitrixTokenManager.refreshTokens();
      
      // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
      const newAccessToken = await bitrixTokenManager.getAccessToken();
      const tokenData = bitrixTokenManager.getTokenData();
      
      const retryResponse = await axios.post(`${tokenData.client_endpoint}${method}`, {
        ...params,
        auth: newAccessToken
      });
      
      if (retryResponse.data.error) {
        throw new Error(`Bitrix API Error: ${retryResponse.data.error_description}`);
      }
      
      return retryResponse.data;
    }
    
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ª–∏–¥–æ–≤ –∏–∑ Bitrix24
 */
async function getLeadSources() {
  try {
    console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ª–∏–¥–æ–≤ –∏–∑ Bitrix24 (OAuth)');
    
    const data = await bitrixRequest('crm.status.list', {
      filter: {
        ENTITY_ID: 'SOURCE' // –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ª–∏–¥–æ–≤
      }
    });

    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${data.result.length}`);
    return data.result;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ getLeadSources:', error);
    throw error;
  }
}

/**
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */
async function getLeads(filters = {}, select = [], maxLeads = null) {
  try {
    console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –í–°–ï–• –ª–∏–¥–æ–≤ –∏–∑ Bitrix24 (OAuth)', { filters, maxLeads: maxLeads || '–ù–ï–¢ –õ–ò–ú–ò–¢–ê' });
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –ø–æ–ª–µ–π –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const defaultSelect = [
      'ID',
      'TITLE', 
      'STATUS_ID',
      'SOURCE_ID',
      'ASSIGNED_BY_ID',
      'DATE_CREATE',
      'DATE_MODIFY',
      'OPPORTUNITY',
      'COMPANY_TITLE',
      'CONTACT_ID',
      'PHONE',
      'EMAIL',
      'UF_*' // –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è
    ];

    // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    let requestParams = {
      filter: { ...filters }, // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      select: select.length > 0 ? select : defaultSelect,
      order: { DATE_CREATE: 'DESC' }
    };

    // –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üîç –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Bitrix24:', requestParams.filter);

    let allLeads = [];
    const seenLeadIds = new Set(); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ ID
    let start = 0;
    const limit = 50;

    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –ª–∏–¥—ã –±–µ–∑ –∂–µ—Å—Ç–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    while (true) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –ª–∏–º–∏—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ
      if (maxLeads && allLeads.length >= maxLeads) {
        console.log(`üìä –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∑–∞–¥–∞–Ω–Ω—ã–π –ª–∏–º–∏—Ç –≤ ${maxLeads} –ª–∏–¥–æ–≤`);
        break;
      }
      
      const currentLimit = maxLeads ? Math.min(limit, maxLeads - allLeads.length) : limit;
      
      const data = await bitrixRequest('crm.lead.list', {
        ...requestParams,
        start,
        limit: currentLimit
      });

      const currentBatch = data.result || [];
      
      // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–¥—ã (–¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è)
      const uniqueLeadsInBatch = [];
      let duplicatesInBatch = 0;
      
      currentBatch.forEach(lead => {
        if (!seenLeadIds.has(lead.ID)) {
          seenLeadIds.add(lead.ID);
          uniqueLeadsInBatch.push(lead);
        } else {
          duplicatesInBatch++;
        }
      });
      
      allLeads = allLeads.concat(uniqueLeadsInBatch);
      
      console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${Math.floor(start/limit) + 1}: –ø–æ–ª—É—á–µ–Ω–æ ${currentBatch.length} –ª–∏–¥–æ–≤, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: ${uniqueLeadsInBatch.length}, –¥—É–±–ª–µ–π: ${duplicatesInBatch}, –≤—Å–µ–≥–æ: ${allLeads.length}`);
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ 'next' –∏–∑ –æ—Ç–≤–µ—Ç–∞ API –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ü–∞
      if (data.next !== undefined) {
        start = data.next;
        console.log(`‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –ø–æ–∑–∏—Ü–∏—è: ${start}`);
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—è next, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        if (currentBatch.length === limit) {
          start += limit;
          console.log(`‚û°Ô∏è –ù–µ—Ç –ø–æ–ª—è next, –Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–∞—è. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø–æ–∑–∏—Ü–∏–∏: ${start}`);
        } else {
          // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–ø–æ–ª–Ω–∞—è –∏ –Ω–µ—Ç next - —ç—Ç–æ –∫–æ–Ω–µ—Ü
          console.log('üìã –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –ª–∏–¥–æ–≤');
          break;
        }
      }
      
      // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
      if (start >= 10000) {
        console.warn(`‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: ${start}`);
        break;
      }
    }

    console.log(`‚úÖ –ò–¢–û–ì–û –ø–æ–ª—É—á–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–¥–æ–≤: ${allLeads.length}`);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
    if (filters.SOURCE_ID && !Array.isArray(filters.SOURCE_ID)) {
      const expectedSourceId = filters.SOURCE_ID;
      const leadsWithWrongSource = allLeads.filter(lead => lead.SOURCE_ID !== expectedSourceId);
      
      if (leadsWithWrongSource.length > 0) {
        console.warn(`‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ù–∞–π–¥–µ–Ω–æ ${leadsWithWrongSource.length} –ª–∏–¥–æ–≤ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º!`);
        console.log('üîç –ü—Ä–∏–º–µ—Ä—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ª–∏–¥–æ–≤:', 
          leadsWithWrongSource.slice(0, 3).map(lead => ({
            id: lead.ID,
            sourceId: lead.SOURCE_ID,
            expected: expectedSourceId
          }))
        );
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Ä—É—á–Ω—É—é –∫–∞–∫ fallback
        allLeads = allLeads.filter(lead => lead.SOURCE_ID === expectedSourceId);
        console.log(`üîß –ü–æ—Å–ª–µ —Ä—É—á–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å: ${allLeads.length} –ª–∏–¥–æ–≤`);
      }
    }
    
    // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    return await enrichLeadsWithSourceNames(allLeads);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ getLeads:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–π –ª–∏–¥–æ–≤
 */
async function getLeadStages() {
  try {
    console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–π –ª–∏–¥–æ–≤ –∏–∑ Bitrix24 (OAuth)');
    
    const data = await bitrixRequest('crm.status.list', {
      filter: {
        ENTITY_ID: 'STATUS' // —Å—Ç–∞–¥–∏–∏ –ª–∏–¥–æ–≤
      }
    });

    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç–∞–¥–∏–π: ${data.result.length}`);
    return data.result;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ getLeadStages:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–∏–¥–∞
 */
async function getLead(leadId) {
  try {
    const data = await bitrixRequest('crm.lead.get', {
      id: leadId
    });

    return data.result;

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ getLead –¥–ª—è –ª–∏–¥–∞ ${leadId}:`, error);
    throw error;
  }
}

/**
 * –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –ø–æ –ª–∏–¥—É
 */
async function getDealsByLead(leadId) {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –ª–∏–¥–∞
    const lead = await getLead(leadId);
    
    if (!lead) {
      console.warn(`‚ö†Ô∏è –õ–∏–¥ ${leadId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return [];
    }
    
    const contactId = lead.CONTACT_ID;
    
    if (!contactId) {
      // –ï—Å–ª–∏ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏/—Ç–µ–ª–µ—Ñ–æ–Ω—É
      console.log(`üìû –õ–∏–¥ ${leadId} –±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞, –∏—â–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É/email`);
      return await findDealsByLeadData(lead);
    }

    // –ò—â–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É
    console.log(`üîç –ü–æ–∏—Å–∫ —Å–¥–µ–ª–æ–∫ –¥–ª—è –ª–∏–¥–∞ ${leadId} —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç ${contactId}`);
    
    const data = await bitrixRequest('crm.deal.list', {
      filter: {
        CONTACT_ID: contactId
      },
      select: [
        'ID',
        'TITLE',
        'STAGE_ID', 
        'OPPORTUNITY',
        'CURRENCY_ID',
        'DATE_CREATE',
        'DATE_MODIFY',
        'ASSIGNED_BY_ID',
        'CATEGORY_ID',
        'CONTACT_ID'
      ]
    });

    const deals = data.result || [];
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫ –¥–ª—è –ª–∏–¥–∞ ${leadId}: ${deals.length}`);
    return deals;

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ getDealsByLead –¥–ª—è –ª–∏–¥–∞ ${leadId}:`, error);
    return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
  }
}

/**
 * –ù–û–í–´–ô –º–µ—Ç–æ–¥: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É
 */
async function getDealsByContact(contactId) {
  try {
    console.log(`üîç –ó–∞–ø—Ä–æ—Å —Å–¥–µ–ª–æ–∫ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ ${contactId}`);
    
    const data = await bitrixRequest('crm.deal.list', {
      filter: {
        'CONTACT_ID': contactId
      },
      select: [
        'ID', 'TITLE', 'STAGE_ID', 'CONTACT_ID', 'COMPANY_ID', 
        'LEAD_ID', 'UF_CRM_LEAD_ID', 'ORIGINATOR_ID',
        'DATE_CREATE', 'DATE_MODIFY', 'OPPORTUNITY', 'CURRENCY_ID', 'CATEGORY_ID'
      ]
    });

    if (!data || !data.result) {
      console.log(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–¥–µ–ª–æ–∫ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ ${contactId}`);
      return [];
    }

    const deals = data.result;
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ ${contactId}: ${deals.length}`);
    
    return deals;

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ ${contactId}:`, error);
    return [];
  }
}

/**
 * –ü–æ–∏—Å–∫ —Å–¥–µ–ª–æ–∫ –ø–æ –¥–∞–Ω–Ω—ã–º –ª–∏–¥–∞ (—Ç–µ–ª–µ—Ñ–æ–Ω, email, –Ω–∞–∑–≤–∞–Ω–∏–µ)
 */
async function findDealsByLeadData(lead) {
  try {
    const phone = lead.PHONE?.[0]?.VALUE;
    const email = lead.EMAIL?.[0]?.VALUE;
    const title = lead.TITLE;
    
    if (!phone && !email && !title) {
      return [];
    }
    
    // –ò—â–µ–º —Å–¥–µ–ª–∫–∏ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const searchFilters = [];
    
    if (phone) {
      // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç—ã
      const contactsData = await bitrixRequest('crm.contact.list', {
        filter: { PHONE: phone },
        select: ['ID']
      });
      
      const contactIds = contactsData.result.map(contact => contact.ID);
      if (contactIds.length > 0) {
        searchFilters.push({ CONTACT_ID: contactIds });
      }
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    if (searchFilters.length === 0) {
      return [];
    }
    
    // –ò—â–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
    for (const filter of searchFilters) {
      const dealsData = await bitrixRequest('crm.deal.list', {
        filter,
        select: ['ID', 'TITLE', 'STAGE_ID', 'OPPORTUNITY', 'DATE_CREATE']
      });
      
      if (dealsData.result.length > 0) {
        return dealsData.result;
      }
    }
    
    return [];
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ findDealsByLeadData:', error);
    return [];
  }
}

/**
 * –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
 */
async function getDeals(filters = {}, select = [], limit = 500) {
  try {
    console.log('üîç –ó–∞–ø—Ä–æ—Å —Å–¥–µ–ª–æ–∫ –∏–∑ Bitrix24 —Å —Ñ–∏–ª—å—Ç—Ä–æ–º:', filters);
    
    const defaultSelect = [
      'ID',
      'TITLE',
      'STAGE_ID',
      'CATEGORY_ID', 
      'OPPORTUNITY',
      'CURRENCY_ID',
      'DATE_CREATE',
      'DATE_MODIFY',
      'ASSIGNED_BY_ID',
      'CONTACT_ID',
      'COMPANY_ID',
      'LEAD_ID',
      'UF_CRM_LEAD_ID', 
      'ORIGINATOR_ID'
    ];

    const params = {
      filter: filters,
      select: select.length > 0 ? select : defaultSelect,
      order: { DATE_CREATE: 'DESC' },
      start: 0
    };

    if (limit) {
      params.limit = limit;
    }

    let allDeals = [];
    let start = 0;
    const batchLimit = 50;

    while (allDeals.length < limit) {
      const currentLimit = Math.min(batchLimit, limit - allDeals.length);
      
      const data = await bitrixRequest('crm.deal.list', {
        ...params,
        start,
        limit: currentLimit
      });

      if (!data || !data.result) {
        console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Bitrix24 –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–¥–µ–ª–æ–∫');
        break;
      }

      const currentBatch = data.result;
      allDeals = allDeals.concat(currentBatch);
      
      console.log(`üìÑ –ü–æ–ª—É—á–µ–Ω–æ —Å–¥–µ–ª–æ–∫: ${currentBatch.length}, –≤—Å–µ–≥–æ: ${allDeals.length}`);
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ next –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      if (data.next !== undefined) {
        start = data.next;
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—è next, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        if (currentBatch.length === batchLimit) {
          start += batchLimit;
        } else {
          // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–ø–æ–ª–Ω–∞—è –∏ –Ω–µ—Ç next - —ç—Ç–æ –∫–æ–Ω–µ—Ü
          console.log('üìã –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫');
          break;
        }
      }
      
      // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
      if (start >= 5000) {
        console.warn('‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 5000 —Å–¥–µ–ª–æ–∫');
        break;
      }
    }

    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–¥–µ–ª–æ–∫: ${allDeals.length}`);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–¥–µ–ª–æ–∫
    if (allDeals.length > 0) {
      console.log('üìã –ü—Ä–∏–º–µ—Ä —Å–¥–µ–ª–æ–∫:');
      allDeals.slice(0, 3).forEach((deal, index) => {
        console.log(`  –°–¥–µ–ª–∫–∞ ${index + 1}:`);
        console.log(`    ID: ${deal.ID}`);
        console.log(`    TITLE: ${deal.TITLE}`);
        console.log(`    CATEGORY_ID: ${deal.CATEGORY_ID}`);
        console.log(`    CONTACT_ID: ${deal.CONTACT_ID}`);
        console.log(`    LEAD_ID: ${deal.LEAD_ID}`);
        console.log(`    UF_CRM_LEAD_ID: ${deal.UF_CRM_LEAD_ID}`);
        console.log(`    DATE_CREATE: ${deal.DATE_CREATE}`);
      });
    }

    return allDeals;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫:', error);
    throw error;
  }
}

/**
 * –ù–û–í–´–ô –º–µ—Ç–æ–¥: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ—Ä–æ–Ω–æ–∫ (–∫–∞—Ç–µ–≥–æ—Ä–∏–π) —Å–¥–µ–ª–æ–∫
 */
async function getDealCategories() {
  try {
    console.log('üîç –ó–∞–ø—Ä–æ—Å –≤–æ—Ä–æ–Ω–æ–∫ —Å–¥–µ–ª–æ–∫ –∏–∑ Bitrix24');
    
    const data = await bitrixRequest('crm.category.list', {
      entityTypeId: 2 // 2 = —Å–¥–µ–ª–∫–∏
    });
    
    if (!data || !data.result) {
      console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤–æ—Ä–æ–Ω–æ–∫ —Å–¥–µ–ª–æ–∫');
      return [];
    }

    const categories = data.result;
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –≤–æ—Ä–æ–Ω–æ–∫ —Å–¥–µ–ª–æ–∫: ${categories.length}`);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤–æ—Ä–æ–Ω–∫–∏
    categories.forEach(category => {
      console.log(`  –í–æ—Ä–æ–Ω–∫–∞: ID=${category.ID}, NAME="${category.NAME}"`);
    });
    
    return categories;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ—Ä–æ–Ω–æ–∫ —Å–¥–µ–ª–æ–∫:', error);
    return [];
  }
}

/**
 * –û–±–æ–≥–∞—â–µ–Ω–∏–µ –ª–∏–¥–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
 */
async function enrichLeadsWithSourceNames(leads) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    const sources = await getLeadSources();
    const sourceMap = {};
    
    sources.forEach(source => {
      sourceMap[source.STATUS_ID] = source.NAME;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫ –ª–∏–¥–∞–º
    return leads.map(lead => ({
      ...lead,
      SOURCE_NAME: sourceMap[lead.SOURCE_ID] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫'
    }));

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ enrichLeadsWithSourceNames:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–∏–¥—ã –±–µ–∑ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    return leads.map(lead => ({
      ...lead,
      SOURCE_NAME: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫'
    }));
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π
 */
async function getCustomFields(entityType = 'LEAD') {
  try {
    console.log(`üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π –¥–ª—è ${entityType} (OAuth)`);
    
    const data = await bitrixRequest('crm.userfield.list', {
      filter: {
        ENTITY_ID: `CRM_${entityType}`
      }
    });

    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π: ${data.result.length}`);
    return data.result;

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ getCustomFields –¥–ª—è ${entityType}:`, error);
    throw error;
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–∞
 */
async function updateLead(leadId, fields) {
  try {
    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–∞ ${leadId}`);
    
    const data = await bitrixRequest('crm.lead.update', {
      id: leadId,
      fields: fields
    });

    console.log(`‚úÖ –õ–∏–¥ ${leadId} –æ–±–Ω–æ–≤–ª–µ–Ω`);
    return data.result;

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ updateLead –¥–ª—è –ª–∏–¥–∞ ${leadId}:`, error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º)
 */
async function getSources() {
  return getLeadSources();
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤) –∏–∑ Bitrix24
 * –î–æ–±–∞–≤–∏—Ç—å –≤ bitrix/bitrixService.js
 */
async function getUsers(filters = {}) {
  try {
    console.log('üë• –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Bitrix24');
    
    const params = {
      select: [
        'ID',
        'NAME', 
        'LAST_NAME',
        'EMAIL',
        'ACTIVE',
        'WORK_POSITION',
        'UF_DEPARTMENT'
      ]
      // –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä ACTIVE - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    };
    
    console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', params);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: bitrixRequest –≤–º–µ—Å—Ç–æ makeRequest
    const response = await bitrixRequest('user.get', params);
    
    if (response && response.result) {
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${response.result.length}`);
      console.log('üë• –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', response.result.slice(0, 3).map(user => ({
        id: user.ID,
        name: `${user.NAME} ${user.LAST_NAME}`.trim(),
        position: user.WORK_POSITION,
        active: user.ACTIVE
      })));
      
      return response.result;
    }
    
    console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ –æ—Ç–≤–µ—Ç–µ Bitrix24');
    return [];
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Bitrix24:', error);
    return [];
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –í–°–ï–• —Ñ—É–Ω–∫—Ü–∏–π –≤–∫–ª—é—á–∞—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é getLeads
module.exports = {
  bitrixRequest,
  getLeadSources,
  getSources,         // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  getLeads,           // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –° –ü–†–ê–í–ò–õ–¨–ù–û–ô –ü–ê–ì–ò–ù–ê–¶–ò–ï–ô
  getLeadStages,
  getLead,
  updateLead,
  getDealsByLead,
  getDealsByContact,  
  getDeals,           // ‚Üê –¢–ê–ö–ñ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ê –ü–ê–ì–ò–ù–ê–¶–ò–Ø
  getDealCategories,  
  getCustomFields,
  enrichLeadsWithSourceNames,
  getUsers
};