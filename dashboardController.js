// controllers/dashboardController.js - –§–ò–ù–ê–õ–¨–ù–ê–Ø –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥–∏–∫–æ–π –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–æ–Ω–≤–µ—Ä—Å–∏–π
const LeadSource = require('../models/LeadSource');
const bitrixService = require('../bitrix/bitrixService');
const { format, parseISO, isValid } = require('date-fns');

// –¢–û–ß–ù–ê–Ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–∞–¥–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ API Bitrix24
const STAGE_CONFIG = {
  // –†–∞–±–æ—á–∏–µ —Å—Ç–∞–¥–∏–∏
  new: {
    statuses: ['2'],
    name: '–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
    type: 'working'
  },
  distributed: {
    statuses: ['NEW'],
    name: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω', 
    type: 'working'
  },
  inWork: {
    statuses: ['4'],
    name: '–í —Ä–∞–±–æ—Ç–µ',
    type: 'working'
  },
  communication: {
    statuses: ['UC_WFIWVS'],
    name: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
    type: 'working'
  },
  noResponse: {
    statuses: ['UC_OMBROC'],
    name: '–ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç',
    type: 'working'
  },
  longNoCall: {
    statuses: ['UC_VKCFXM'],
    name: '–î–ª–∏—Ç–µ–ª—å–Ω—ã–π –Ω–µ–¥–æ–∑–≤–æ–Ω',
    type: 'working'
  },
  qualified: {
    statuses: ['6'],
    name: '–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∞',
    type: 'working'
  },
  
  // –í—Å—Ç—Ä–µ—á–∏ - –¢–û–ß–ù–´–ï ID!
  meetingsScheduled: {
    statuses: ['UC_AD2OF7'],
    name: '–í—Å—Ç—Ä–µ—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞',
    type: 'meeting'
  },
  meetingsFailed: {
    statuses: ['UC_25C0T2'],
    name: '–ù–µ—Å–æ—Å—Ç–æ—è–≤—à–∞—è—Å—è –≤—Å—Ç—Ä–µ—á–∞',
    type: 'working'
  },
  
  // –£—Å–ø–µ—à–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏
  converted: {
    statuses: ['CONVERTED'],
    name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
    type: 'success'
  },
  
  // –í–°–ï –≤–∏–¥—ã –±—Ä–∞–∫–∞ —Å –¢–û–ß–ù–´–ú–ò ID –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞
  junk: {
    statuses: [
      'JUNK',                    // –°—Ç–∞—Ä—å–µ –¥–æ 01.12.2022
      '11',                      // –ù–µ –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å
      '10',                      // –ù–µ—Å–ø–∏—Å—ã–≤–∞–µ–º—ã–µ –¥–æ–ª–≥–∏
      '9',                       // –ö–ª–∏–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —á–∞—Ç
      '8',                       // –†–∞–±–æ—Ç–∞–µ—Ç —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏
      '5',                       // –†–∏—Å–∫ –ø–æ—Ç–µ—Ä–∏ –∏–º—É—â–µ—Å—Ç–≤–∞ (–Ω–µ –∏–ø–æ—Ç–µ–∫–∞)
      'UC_GQ2A1A',              // –£–∂–µ –Ω–µ –Ω–∞–¥–æ
      'UC_32WMCS',              // –†–µ–∫–ª–∞–º–∞/—Å–ø–∞–º
      'UC_XSGR98',              // –î–æ–ª–≥ –º–µ–Ω–µ–µ 250 —Ç.—Ä.
      'UC_NN9P5K',              // –ù–æ–º–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω/–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      'UC_T7LX9V',              // –ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç/–î–ª–∏—Ç–µ–ª—å–Ω—ã–π –Ω–µ–¥–æ–∑–≤–æ–Ω
      'UC_C175EE',              // –ù–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É
      'UC_DFO4SC'               // –î—É–±–ª—å
    ],
    name: '–ë—Ä–∞–∫',
    type: 'junk'
  }
};

// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥: —Å—Ç–∞—Ç—É—Å -> –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const STATUS_TO_STAGE = {};
Object.keys(STAGE_CONFIG).forEach(stageKey => {
  const stage = STAGE_CONFIG[stageKey];
  stage.statuses.forEach(status => {
    STATUS_TO_STAGE[status] = {
      key: stageKey,
      ...stage
    };
  });
});

/**
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç —Å —É—á–µ—Ç–æ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
 */
function getPeriodDates(period, startDate, endDate) {
  const now = new Date();
  
  // HOTFIX: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
  console.log(`üîß –ü–û–õ–£–ß–ï–ù –ó–ê–ü–†–û–°: period="${period}", startDate="${startDate}", endDate="${endDate}"`);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—Ç—ã –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
  function toMoscowDateTime(dateString, isEndOfDay = false) {
    const date = new Date(dateString);
    if (isEndOfDay) {
      date.setHours(23, 59, 59, 999);
    } else {
      date.setHours(0, 0, 0, 0);
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ ISO —Å—Ç—Ä–æ–∫—É —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    const seconds = String(date.getSeconds()).padStart(2, '0');
    
    return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;
  }
  
  let start, end;
  
  switch (period) {
    case 'today':
      start = toMoscowDateTime(now.toISOString().split('T')[0]);
      end = toMoscowDateTime(now.toISOString().split('T')[0], true);
      break;
      
    case 'yesterday':
      const yesterday = new Date(now);
      yesterday.setDate(now.getDate() - 1);
      start = toMoscowDateTime(yesterday.toISOString().split('T')[0]);
      end = toMoscowDateTime(yesterday.toISOString().split('T')[0], true);
      break;
      
    case 'week':
      const startOfWeek = new Date(now);
      startOfWeek.setDate(now.getDate() - now.getDay() + 1); // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
      start = toMoscowDateTime(startOfWeek.toISOString().split('T')[0]);
      end = toMoscowDateTime(now.toISOString().split('T')[0], true);
      break;
      
    case 'month':
      const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
      start = toMoscowDateTime(startOfMonth.toISOString().split('T')[0]);
      end = toMoscowDateTime(now.toISOString().split('T')[0], true);
      break;
      
    case 'quarter':
      const currentQuarter = Math.floor(now.getMonth() / 3);
      const quarterStart = new Date(now.getFullYear(), currentQuarter * 3, 1);
      start = toMoscowDateTime(quarterStart.toISOString().split('T')[0]);
      end = toMoscowDateTime(now.toISOString().split('T')[0], true);
      break;
      
    case 'custom':
      if (!startDate || !endDate) {
        console.log('üîß HOTFIX: period=custom –±–µ–∑ –¥–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π');
        const weekStart = new Date(now);
        weekStart.setDate(now.getDate() - 7);
        start = toMoscowDateTime(weekStart.toISOString().split('T')[0]);
        end = toMoscowDateTime(now.toISOString().split('T')[0], true);
      } else {
        start = toMoscowDateTime(startDate);
        end = toMoscowDateTime(endDate, true);
      }
      break;
      
    default:
      // Fallback –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤
      console.log(`üîß HOTFIX: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ "${period}", –∏—Å–ø–æ–ª—å–∑—É–µ–º week`);
      const defaultWeekStart = new Date(now);
      defaultWeekStart.setDate(now.getDate() - now.getDay() + 1);
      start = toMoscowDateTime(defaultWeekStart.toISOString().split('T')[0]);
      end = toMoscowDateTime(now.toISOString().split('T')[0], true);
  }
  
  console.log(`üìÖ –ò—Ç–æ–≥–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ "${period}": ${start} ‚Äî ${end}`);
  
  return { start, end };
}

/**
 * üéØ –ü–†–û–°–¢–ê–Ø –ò –ì–ï–ù–ò–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–¢–õ–û–ñ–ï–ù–ù–´–• –ö–û–ù–í–ï–†–°–ò–ô
 */
function analyzeConversions(leads, deals, sourceId = null) {
  console.log(`üéØ –ê–ù–ê–õ–ò–ó –ö–û–ù–í–ï–†–°–ò–ô: ${leads.length} –ª–∏–¥–æ–≤, ${deals.length} —Å–¥–µ–ª–æ–∫`);
  
  // –°–æ–∑–¥–∞–µ–º Set –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ª–∏–¥–æ–≤ –≤ –ø–µ—Ä–∏–æ–¥–µ
  const leadsInPeriodSet = new Set(leads.map(lead => lead.ID));
  
  const result = {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
    basicMeetings: 0,
    basicScheduled: 0,
    
    // –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏  
    delayedMeetings: 0,
    delayedScheduled: 0,
    
    // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è
    basicDetails: [],
    delayedDetails: [],
    
    // –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    bySource: {}
  };
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å–¥–µ–ª–∫—É
  deals.forEach(deal => {
    const leadId = deal.LEAD_ID;
    if (!leadId) return;
    
    // üéØ –ö–õ–Æ–ß–ï–í–ê–Ø –õ–û–ì–ò–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–∏–¥ –≤ –Ω–∞—à–µ–º –ø–µ—Ä–∏–æ–¥–µ
    const isBasicConversion = leadsInPeriodSet.has(leadId);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤—Å—Ç—Ä–µ—á–∏ (–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–∞—è/—Å–æ—Å—Ç–æ—è–≤—à–∞—è—Å—è)
    const isScheduled = isScheduledMeeting(deal);
    
    if (isBasicConversion) {
      // ‚úÖ –û–°–ù–û–í–ù–ê–Ø –ö–û–ù–í–ï–†–°–ò–Ø: –ª–∏–¥ —Å–æ–∑–¥–∞–Ω –≤ –ø–µ—Ä–∏–æ–¥–µ
      if (isScheduled) {
        result.basicScheduled++;
      } else {
        result.basicMeetings++;
      }
      
      result.basicDetails.push({
        leadId,
        dealId: deal.ID,
        dealTitle: deal.TITLE,
        dealDate: deal.DATE_CREATE,
        type: isScheduled ? 'scheduled' : 'meeting',
        category: 'basic'
      });
      
    } else {
      // üîÑ –û–¢–õ–û–ñ–ï–ù–ù–ê–Ø –ö–û–ù–í–ï–†–°–ò–Ø: –ª–∏–¥ —Å–æ–∑–¥–∞–Ω –î–û –ø–µ—Ä–∏–æ–¥–∞
      if (isScheduled) {
        result.delayedScheduled++;
      } else {
        result.delayedMeetings++;
      }
      
      result.delayedDetails.push({
        leadId,
        dealId: deal.ID,
        dealTitle: deal.TITLE,
        dealDate: deal.DATE_CREATE,
        type: isScheduled ? 'scheduled' : 'meeting',
        category: 'delayed'
      });
    }
  });
  
  console.log(`‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê –ö–û–ù–í–ï–†–°–ò–ô:`);
  console.log(`  üìà –û—Å–Ω–æ–≤–Ω—ã–µ: ${result.basicMeetings} –≤—Å—Ç—Ä–µ—á + ${result.basicScheduled} –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π`);
  console.log(`  üîÑ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ: ${result.delayedMeetings} –≤—Å—Ç—Ä–µ—á + ${result.delayedScheduled} –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π`);
  
  return result;
}

/**
 * üéØ –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ò–ü–ê –í–°–¢–†–ï–ß–ò
 */
function isScheduledMeeting(deal) {
  // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π vs —Å–æ—Å—Ç–æ—è–≤—à–µ–π—Å—è –≤—Å—Ç—Ä–µ—á–∏
  const title = (deal.TITLE || '').toLowerCase();
  
  // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏
  const scheduledKeywords = ['–Ω–∞–∑–Ω–∞—á–µ–Ω–∞', '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞', '–≤—Å—Ç—Ä–µ—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'];
  const isScheduledByTitle = scheduledKeywords.some(keyword => title.includes(keyword));
  
  // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Å—Ç–∞—Ç—É—Å
  const isScheduledByStatus = deal.CATEGORY_ID === 'SCHEDULED' || deal.STATUS_ID === 'SCHEDULED';
  
  return isScheduledByTitle || isScheduledByStatus;
}

/**
 * üõ†Ô∏è –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ø–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–≤ –ª–∏–¥–æ–≤
 */
function countLeadStatuses(sourceLeads) {
  const statusCounts = {
    communication: 0,
    qualified: 0,
    junk: 0,
    under250k: 0,
    meetingsScheduledStatus: 0
  };
  
  sourceLeads.forEach(lead => {
    const status = lead.STATUS_ID;
    switch(status) {
      case 'UC_WFIWVS':  // –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
      case 'UC_OMBROC':  // –ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç
      case 'UC_VKCFXM':  // –î–ª–∏—Ç–µ–ª—å–Ω—ã–π –Ω–µ–¥–æ–∑–≤–æ–Ω
        statusCounts.communication++;
        break;
      case '6':          // –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∞
      case 'CONVERTED':  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        statusCounts.qualified++;
        break;
      case 'UC_AD2OF7':  // –í—Å—Ç—Ä–µ—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞
        statusCounts.meetingsScheduledStatus++;
        break;
      case 'JUNK':
      case '11':
      case '10':
      case '9':
      case '8':
      case '5':
      case 'UC_GQ2A1A':
      case 'UC_32WMCS':
      case 'UC_XSGR98':
      case 'UC_NN9P5K':
      case 'UC_T7LX9V':
      case 'UC_C175EE':
      case 'UC_DFO4SC':
        statusCounts.junk++;
        break;
      default:
        if (status && status.includes('UC_')) {
          console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ª–∏–¥–∞: ${status}`);
        }
        break;
    }
  });
  
  return statusCounts;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ª–∏–¥–æ–≤
 */
async function getSources(req, res) {
  try {
    console.log('üìä –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ª–∏–¥–æ–≤');
    
    const sources = await LeadSource.find({}).sort({ name: 1 });
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${sources.length}`);
    
    res.json({
      success: true,
      data: sources,
      total: sources.length
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ª–∏–¥–æ–≤'
    });
  }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å Bitrix24
 */
async function syncSources(req, res) {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å Bitrix24');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ Bitrix24
    const bitrixSources = await bitrixService.getSources();
    console.log(`üì• –ü–æ–ª—É—á–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–∑ Bitrix24: ${bitrixSources.length}`);
    
    let syncedCount = 0;
    let updatedCount = 0;
    
    for (const source of bitrixSources) {
      try {
        const existingSource = await LeadSource.findOne({ 
          bitrixId: source.ID 
        });
        
        if (existingSource) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
          existingSource.name = source.NAME || `–ò—Å—Ç–æ—á–Ω–∏–∫ ${source.ID}`;
          existingSource.lastSync = new Date();
          await existingSource.save();
          updatedCount++;
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
          await LeadSource.create({
            bitrixId: source.ID,
            name: source.NAME || `–ò—Å—Ç–æ—á–Ω–∏–∫ ${source.ID}`,
            isActive: true,
            lastSync: new Date()
          });
          syncedCount++;
        }
      } catch (itemError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ${source.ID}:`, itemError);
      }
    }
    
    console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${syncedCount} –Ω–æ–≤—ã—Ö, ${updatedCount} –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
    
    res.json({
      success: true,
      message: `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${syncedCount} –Ω–æ–≤—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, ${updatedCount} –æ–±–Ω–æ–≤–ª–µ–Ω–æ`,
      synced: syncedCount,
      updated: updatedCount,
      total: bitrixSources.length
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤'
    });
  }
}

/**
 * –¢–û–ß–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–¥–∏–π –ª–∏–¥–æ–≤
 */
function analyzeLeadStage(lead) {
  const statusId = lead.STATUS_ID;
  const stageInfo = STATUS_TO_STAGE[statusId];
  
  if (!stageInfo) {
    console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ª–∏–¥–∞: ${statusId}`);
    return {
      key: 'unknown',
      name: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${statusId}`,
      type: 'working'
    };
  }
  
  return stageInfo;
}

/**
 * –¢–û–ß–ù–´–ô –ø–æ–¥—Å—á–µ—Ç —Å—Ç–∞–¥–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
 */
function calculateStageAnalysis(leads) {
  const analysis = {
    new: 0,
    distributed: 0,
    inWork: 0,
    communication: 0,
    noResponse: 0,
    longNoCall: 0,
    qualified: 0,
    meetingsScheduled: 0,
    meetingsFailed: 0,
    converted: 0,
    junk: 0
  };
  
  console.log('\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞–¥–∏–π –ª–∏–¥–æ–≤:');
  
  leads.forEach(lead => {
    const stage = analyzeLeadStage(lead);
    if (analysis.hasOwnProperty(stage.key)) {
      analysis[stage.key]++;
      console.log(`  –õ–∏–¥ ${lead.ID}: —Å—Ç–∞—Ç—É—Å "${lead.STATUS_ID}" ‚Üí —Å—Ç–∞–¥–∏—è "${stage.key}" (${stage.name})`);
    } else {
      console.log(`  –õ–∏–¥ ${lead.ID}: —Å—Ç–∞—Ç—É—Å "${lead.STATUS_ID}" ‚Üí –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–∞–¥–∏—è "${stage.key}"`);
    }
  });
  
  console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞–¥–∏—è–º:');
  Object.keys(analysis).forEach(key => {
    if (analysis[key] > 0) {
      console.log(`  ${key}: ${analysis[key]} –ª–∏–¥–æ–≤`);
    }
  });
  
  return analysis;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ª–∏–¥–æ–≤ —Å –ü–†–û–°–¢–û–ô –ª–æ–≥–∏–∫–æ–π –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–æ–Ω–≤–µ—Ä—Å–∏–π
 */
async function getLeadsAnalytics(req, res) {
  try {
    const startTime = Date.now();
    console.log('üìä –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ª–∏–¥–æ–≤ —Å –ü–†–û–°–¢–û–ô –ª–æ–≥–∏–∫–æ–π –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–æ–Ω–≤–µ—Ä—Å–∏–π');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const { period = 'week', sourceId, startDate, endDate } = req.query;
    
    console.log('üîç –í—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', { period, sourceId, startDate, endDate });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ —Å —É—á–µ—Ç–æ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    const dateRange = getPeriodDates(period, startDate, endDate);
    
    console.log(`üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: ${dateRange.start} - ${dateRange.end}`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è Bitrix24 —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
    const filters = {
      '>=DATE_CREATE': dateRange.start,
      '<=DATE_CREATE': dateRange.end
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if (sourceId && sourceId !== 'all') {
      filters['SOURCE_ID'] = sourceId;
    }
    
    console.log('üîç –§–∏–ª—å—Ç—Ä—ã –¥–ª—è Bitrix24 —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º:', filters);
    
    // –ü–æ–ª—É—á–∞–µ–º –ª–∏–¥—ã –∏–∑ Bitrix24 –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    const leads = await bitrixService.getLeads(filters);
    console.log(`üì• –ü–æ–ª—É—á–µ–Ω–æ –ª–∏–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: ${leads.length}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    const deals = await bitrixService.getDeals({
      '>=DATE_CREATE': dateRange.start,
      '<=DATE_CREATE': dateRange.end,
      'CATEGORY_ID': '31'
    });
    console.log(`üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥: ${deals.length}`);
    
    // üéØ –ü–†–û–°–¢–û–ô –ê–ù–ê–õ–ò–ó –ö–û–ù–í–ï–†–°–ò–ô
    const conversions = analyzeConversions(leads, deals, sourceId);
    
    // –î–û–ë–ê–í–õ–Ø–ï–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –û–¢–õ–ê–î–ö–ò
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SOURCE_ID –≤ –ª–∏–¥–∞—Ö:');
    const sourceStats = {};
    leads.forEach(lead => {
      const sourceIdLead = lead.SOURCE_ID || 'NO_SOURCE';
      sourceStats[sourceIdLead] = (sourceStats[sourceIdLead] || 0) + 1;
    });
    console.log('üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:', sourceStats);
    console.log(`‚ùì –õ–∏–¥–æ–≤ –±–µ–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: ${sourceStats['NO_SOURCE'] || 0}`);
    
    if (leads.length === 0) {
      return res.json({
        success: true,
        data: [],
        period: dateRange,
        totalLeads: 0,
        totalMeetingsHeld: 0,
        totalMeetingsFromDatabase: 0,
        totalScheduledFromDatabase: 0,
        note: '–õ–∏–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥'
      });
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ª–∏–¥—ã –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    const leadsBySource = groupLeadsBySource(leads);
    console.log(`üìä –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –ª–∏–¥–∞–º–∏: ${Object.keys(leadsBySource).length}`);
    
    // –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•
    const totalLeadsCheck = Object.values(leadsBySource).reduce((sum, leads) => sum + leads.length, 0);
    console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—É—á–µ–Ω–æ ${leads.length} –ª–∏–¥–æ–≤, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ ${totalLeadsCheck} –ª–∏–¥–æ–≤`);
    if (leads.length !== totalLeadsCheck) {
      console.error(`‚ùå –ü–û–¢–ï–†–Ø –î–ê–ù–ù–´–•: ${leads.length - totalLeadsCheck} –ª–∏–¥–æ–≤ –ø–æ—Ç–µ—Ä—è–Ω–æ –ø—Ä–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ!`);
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
    const sourceAnalytics = [];
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å—á–∏—Ç–∞–µ–º totalLeads –ø—Ä–æ—Å—Ç–æ –∫–∞–∫ –¥–ª–∏–Ω—É –º–∞—Å—Å–∏–≤–∞!
    const totalLeads = leads.length;
    let totalMeetingsHeld = 0;
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
    let filteredSources = Object.keys(leadsBySource);
    if (sourceId && sourceId !== 'all') {
      const requestedSources = sourceId.split(',');
      filteredSources = filteredSources.filter(id => requestedSources.includes(id));
    }
    
    for (const [currentSourceId, sourceLeads] of Object.entries(leadsBySource)) {
      if (!filteredSources.includes(currentSourceId)) continue;
      
      console.log(`\nüìä –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ${currentSourceId}: ${sourceLeads.length} –ª–∏–¥–æ–≤`);
      
      // –ü–æ–¥—Å—á–µ—Ç—ã —Å—Ç–∞—Ç—É—Å–æ–≤
      const statusCounts = countLeadStatuses(sourceLeads);
      
      // –û—Å–Ω–æ–≤–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏–¥–æ–≤ –≤ –ø–µ—Ä–∏–æ–¥–µ)
      const meetingsHeld = countMeetingsFromDeals(sourceLeads, deals);
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á
      const meetingsScheduledTotal = statusCounts.meetingsScheduledStatus + meetingsHeld;
      
      // –ö–æ–Ω–≤–µ—Ä—Å–∏—è –∏–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –≤ —Å–æ—Å—Ç–æ—è–≤—à—É—é—Å—è
      const meetingsHeldFromScheduledConversion = meetingsScheduledTotal > 0 
        ? ((meetingsHeld / meetingsScheduledTotal) * 100).toFixed(1)
        : '0.0';
      
      // üéØ –ü–†–û–°–¢–´–ï –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
      // –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–∏—Ö –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–æ–Ω–≤–µ—Ä—Å–∏–π
      const sourcePercentage = sourceLeads.length / leads.length;
      const meetingsFromDatabase = Math.round(conversions.delayedMeetings * sourcePercentage);
      const scheduledFromDatabase = Math.round(conversions.delayedScheduled * sourcePercentage);
      
      totalMeetingsHeld += meetingsHeld;
      
      const analytics = {
        sourceId: currentSourceId,
        sourceName: `–ò—Å—Ç–æ—á–Ω–∏–∫ ${currentSourceId}`,
        totalLeads: sourceLeads.length,
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        comments: statusCounts.communication,
        commentsConversion: sourceLeads.length > 0 ? ((statusCounts.communication / sourceLeads.length) * 100).toFixed(1) : '0.0',
        
        qualified: statusCounts.qualified,
        qualifiedConversion: sourceLeads.length > 0 ? ((statusCounts.qualified / sourceLeads.length) * 100).toFixed(1) : '0.0',
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –≤—Å—Ç—Ä–µ—á–∏
        meetingsScheduled: meetingsScheduledTotal,
        meetingsScheduledConversion: sourceLeads.length > 0 ? ((meetingsScheduledTotal / sourceLeads.length) * 100).toFixed(1) : '0.0',
        
        meetingsHeld,
        meetingsHeldConversion: sourceLeads.length > 0 ? ((meetingsHeld / sourceLeads.length) * 100).toFixed(1) : '0.0',
        
        // –ù–û–í–ê–Ø –º–µ—Ç—Ä–∏–∫–∞
        meetingsHeldFromScheduledConversion,
        
        // üéØ –ü–†–û–°–¢–´–ï –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
        meetingsFromDatabase,
        scheduledFromDatabase,
        
        junk: statusCounts.junk,
        junkPercent: sourceLeads.length > 0 ? ((statusCounts.junk / sourceLeads.length) * 100).toFixed(1) : '0.0',
        
        under250k: sourceLeads.length, // –ü–æ–∫–∞ –≤—Å–µ –ª–∏–¥—ã —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –¥–æ 250–∫
        under250kPercent: '100.0',
        
        stageAnalysis: {
          new: sourceLeads.length - statusCounts.communication - statusCounts.qualified - statusCounts.junk,
          qualified: statusCounts.qualified,
          converted: statusCounts.qualified,
          communication: statusCounts.communication,
          meetingsScheduled: statusCounts.meetingsScheduledStatus,
          junk: statusCounts.junk
        }
      };
      
      sourceAnalytics.push(analytics);
      console.log(`‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ ${currentSourceId}: ${sourceLeads.length} –ª–∏–¥–æ–≤, ${meetingsHeld} –≤—Å—Ç—Ä–µ—á, ${meetingsFromDatabase} –∏–∑ –±–∞–∑—ã`);
    }
    
    const processingTime = Date.now() - startTime;
    
    console.log(`\nüéØ –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê):`);
    console.log(`üìä –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${sourceAnalytics.length}`);
    console.log(`üìà –í—Å–µ–≥–æ –ª–∏–¥–æ–≤: ${totalLeads}`);
    console.log(`ü§ù –í—Å–µ–≥–æ –≤—Å—Ç—Ä–µ—á: ${totalMeetingsHeld}`);
    console.log(`üîÑ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á: ${conversions.delayedMeetings}`);
    console.log(`üìÖ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: ${conversions.delayedScheduled}`);
    console.log(`‚ö° –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${processingTime}ms`);
    
    res.json({
      success: true,
      data: sourceAnalytics,
      period: dateRange,
      totalLeads,
      totalMeetingsHeld,
      
      // üéØ –ü–†–û–°–¢–´–ï –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
      totalMeetingsFromDatabase: conversions.delayedMeetings,
      totalScheduledFromDatabase: conversions.delayedScheduled,
      
      processingTime,
      note: `–ê–Ω–∞–ª–∏–∑ ${totalLeads} –ª–∏–¥–æ–≤ –∏–∑ ${sourceAnalytics.length} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥–∏–∫–æ–π –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–æ–Ω–≤–µ—Ä—Å–∏–π`,
      debug: {
        filters,
        requestedSources: sourceId || 'all',
        actualPeriod: period,
        dateRange,
        
        // üéØ –ü–†–û–°–¢–ê–Ø –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–π
        basicConversions: {
          meetings: conversions.basicMeetings,
          scheduled: conversions.basicScheduled,
          details: conversions.basicDetails.slice(0, 5)
        },
        delayedConversions: {
          meetings: conversions.delayedMeetings,
          scheduled: conversions.delayedScheduled,
          details: conversions.delayedDetails.slice(0, 5)
        },
        
        totalLeadsReceived: leads.length,
        totalLeadsCounted: totalLeads,
        leadsWithoutSource: sourceStats['NO_SOURCE'] || 0,
        sampleLeads: leads.slice(0, 3).map(lead => ({
          id: lead.ID,
          sourceId: lead.SOURCE_ID,
          statusId: lead.STATUS_ID,
          contactId: lead.CONTACT_ID
        })),
        meetingsBreakdown: sourceAnalytics.slice(0, 5).map(item => ({
          sourceName: item.sourceName,
          totalLeads: item.totalLeads,
          meetingsHeld: item.meetingsHeld,
          meetingsHeldConversion: item.meetingsHeldConversion,
          meetingsHeldFromScheduledConversion: item.meetingsHeldFromScheduledConversion,
          meetingsFromDatabase: item.meetingsFromDatabase,
          scheduledFromDatabase: item.scheduledFromDatabase
        }))
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ª–∏–¥–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ª–∏–¥–æ–≤'
    });
  }
}

/**
 * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ª–∏–¥–æ–≤ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º (–ò–°–ü–†–ê–í–õ–ï–ù–û)
 */
function groupLeadsBySource(leads) {
  const grouped = {};
  
  leads.forEach(lead => {
    const sourceId = lead.SOURCE_ID || 'NO_SOURCE'; // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!
    if (!grouped[sourceId]) {
      grouped[sourceId] = [];
    }
    grouped[sourceId].push(lead);
  });
  
  return grouped;
}

/**
 * –ü–æ–¥—Å—á–µ—Ç –≤—Å—Ç—Ä–µ—á —á–µ—Ä–µ–∑ —Å–¥–µ–ª–∫–∏ –≤ –≤–æ—Ä–æ–Ω–∫–µ "–î–æ–≥–æ–≤–æ—Ä"
 */
function countMeetingsFromDeals(leads, deals) {
  const leadIds = leads.map(lead => lead.ID);
  const leadIdsSet = new Set(leadIds);
  
  // –°—á–∏—Ç–∞–µ–º —Å–¥–µ–ª–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∞—à–∏–º–∏ –ª–∏–¥–∞–º–∏
  const relevantDeals = deals.filter(deal => {
    const leadId = deal.LEAD_ID;
    return leadId && leadIdsSet.has(leadId);
  });
  
  console.log(`üìä –î–ï–¢–ê–õ–ò –°–û–°–¢–û–Ø–í–®–ò–•–°–Ø –í–°–¢–†–ï–ß:`);
  relevantDeals.forEach((deal, index) => {
    console.log(`  –í—Å—Ç—Ä–µ—á–∞ ${index + 1}:`);
    console.log(`    –õ–∏–¥ ID: ${deal.LEAD_ID}`);
    console.log(`    –°–¥–µ–ª–∫–∞: ${deal.TITLE}`);
    console.log(`    –î–∞—Ç–∞: ${deal.DATE_CREATE}`);
  });
  
  return relevantDeals.length;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–π –ª–∏–¥–æ–≤ —Å –¢–û–ß–ù–´–ú–ò —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏–∑ API
 */
async function getLeadStages(req, res) {
  try {
    console.log('üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞–¥–∏–π –ª–∏–¥–æ–≤');
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–¥–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å —Ç–æ—á–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    const stages = {};
    
    Object.keys(STAGE_CONFIG).forEach(stageKey => {
      const stage = STAGE_CONFIG[stageKey];
      stage.statuses.forEach(status => {
        stages[status] = stage.name;
      });
    });
    
    console.log(`‚úÖ –°—Ç–∞–¥–∏–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: ${Object.keys(stages).length}`);
    console.log('üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤:');
    Object.keys(stages).forEach(statusId => {
      console.log(`  ${statusId}: ${stages[statusId]}`);
    });
    
    res.json({
      success: true,
      data: stages,
      total: Object.keys(stages).length,
      note: '–°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ —Ç–æ—á–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API Bitrix24'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–¥–∏–π –ª–∏–¥–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–¥–∏–π –ª–∏–¥–æ–≤'
    });
  }
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ID –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –ª–∏–¥–∞—Ö
 */
async function fixSourceIds(req, res) {
  try {
    console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SOURCE_ID –≤ –ª–∏–¥–∞—Ö');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∏–¥—ã
    const leads = await bitrixService.getLeads({});
    console.log(`üì• –ü–æ–ª—É—á–µ–Ω–æ –ª–∏–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${leads.length}`);
    
    let fixedCount = 0;
    const errors = [];
    
    for (const lead of leads) {
      try {
        if (!lead.SOURCE_ID && lead.SOURCE_DESCRIPTION) {
          // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
          const match = lead.SOURCE_DESCRIPTION.match(/\d+/);
          if (match) {
            const sourceId = match[0];
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥ –≤ Bitrix24
            await bitrixService.updateLead(lead.ID, {
              SOURCE_ID: sourceId
            });
            
            fixedCount++;
            console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ª–∏–¥ ${lead.ID}: SOURCE_ID = ${sourceId}`);
          }
        }
      } catch (itemError) {
        errors.push({
          leadId: lead.ID,
          error: itemError.message
        });
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥–∞ ${lead.ID}:`, itemError);
      }
    }
    
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${fixedCount} –ª–∏–¥–æ–≤`);
    
    res.json({
      success: true,
      message: `–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedCount} –ª–∏–¥–æ–≤`,
      fixed: fixedCount,
      errors: errors.length,
      errorDetails: errors.slice(0, 10) // –ü–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è SOURCE_ID:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è SOURCE_ID –≤ –ª–∏–¥–∞—Ö'
    });
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ—Ä–æ–Ω–æ–∫ —Å–¥–µ–ª–æ–∫
 */
async function getDealCategories(req, res) {
  try {
    console.log('üìä –ó–∞–ø—Ä–æ—Å –≤–æ—Ä–æ–Ω–æ–∫ —Å–¥–µ–ª–æ–∫');
    
    const categories = await bitrixService.getDealCategories();
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –≤–æ—Ä–æ–Ω–æ–∫: ${categories.length}`);
    
    res.json({
      success: true,
      data: categories,
      total: categories.length
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ—Ä–æ–Ω–æ–∫ —Å–¥–µ–ª–æ–∫:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ—Ä–æ–Ω–æ–∫ —Å–¥–µ–ª–æ–∫'
    });
  }
}

module.exports = {
  getSources,
  syncSources,
  getLeadsAnalytics,
  getLeadStages,
  fixSourceIds,
  getDealCategories
};