// controllers/dashboardController.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å–æ —Å—á–µ—Ç–æ–º –≤—Å—Ç—Ä–µ—á –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –ª–∏–¥–æ–≤
const LeadSource = require('../models/LeadSource');
const bitrixService = require('../bitrix/bitrixService');
const { format, parseISO, isValid } = require('date-fns');

// –¢–û–ß–ù–ê–Ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–∞–¥–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ API Bitrix24
const STAGE_CONFIG = {
  // –†–∞–±–æ—á–∏–µ —Å—Ç–∞–¥–∏–∏
  new: {
    statuses: ['2'],
    name: '–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
    type: 'working'
  },
  distributed: {
    statuses: ['NEW'],
    name: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω', 
    type: 'working'
  },
  inWork: {
    statuses: ['4'],
    name: '–í —Ä–∞–±–æ—Ç–µ',
    type: 'working'
  },
  communication: {
    statuses: ['UC_WFIWVS'],
    name: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
    type: 'working'
  },
  noResponse: {
    statuses: ['UC_OMBROC'],
    name: '–ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç',
    type: 'working'
  },
  longNoCall: {
    statuses: ['UC_VKCFXM'],
    name: '–î–ª–∏—Ç–µ–ª—å–Ω—ã–π –Ω–µ–¥–æ–∑–≤–æ–Ω',
    type: 'working'
  },
  qualified: {
    statuses: ['6'],
    name: '–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∞',
    type: 'working'
  },
  
  // –í—Å—Ç—Ä–µ—á–∏ - –¢–û–ß–ù–´–ï ID!
  meetingsScheduled: {
    statuses: ['UC_AD2OF7'],
    name: '–í—Å—Ç—Ä–µ—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞',
    type: 'meeting'
  },
  meetingsFailed: {
    statuses: ['UC_25C0T2'],
    name: '–ù–µ—Å–æ—Å—Ç–æ—è–≤—à–∞—è—Å—è –≤—Å—Ç—Ä–µ—á–∞',
    type: 'working'
  },
  
  // –£—Å–ø–µ—à–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏
  converted: {
    statuses: ['CONVERTED'],
    name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
    type: 'success'
  },
  
  // –í–°–ï –≤–∏–¥—ã –±—Ä–∞–∫–∞ —Å –¢–û–ß–ù–´–ú–ò ID –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ + –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
  junk: {
    statuses: [
      'JUNK',                    // –°—Ç–∞—Ä—å–µ –¥–æ 01.12.2022
      '11',                      // –ù–µ –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å
      '10',                      // –ù–µ—Å–ø–∏—Å—ã–≤–∞–µ–º—ã–µ –¥–æ–ª–≥–∏
      '9',                       // –ö–ª–∏–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —á–∞—Ç
      '8',                       // –†–∞–±–æ—Ç–∞–µ—Ç —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏
      '5',                       // –†–∏—Å–∫ –ø–æ—Ç–µ—Ä–∏ –∏–º—É—â–µ—Å—Ç–≤–∞ (–Ω–µ –∏–ø–æ—Ç–µ–∫–∞)
      'UC_GQ2A1A',              // –£–∂–µ –Ω–µ –Ω–∞–¥–æ
      'UC_32WMCS',              // –†–µ–∫–ª–∞–º–∞/—Å–ø–∞–º
      'UC_XSGR98',              // –î–æ–ª–≥ –º–µ–Ω–µ–µ 250 —Ç.—Ä.
      'UC_NN9P5K',              // –ù–æ–º–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω/–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      'UC_T7LX9V',              // –ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç/–î–ª–∏—Ç–µ–ª—å–Ω—ã–π –Ω–µ–¥–æ–∑–≤–æ–Ω
      'UC_C175EE',              // –ù–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É
      'UC_DFO4SC',              // –î—É–±–ª—å
      //'UC_IN9DMO'               // –ù–æ–≤—ã–π –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å (–¥–æ–±–∞–≤–ª–µ–Ω)
    ],
    name: '–ë—Ä–∞–∫',
    type: 'junk'
  },
  // –ù–û–í–ê–Ø –ö–ê–¢–ï–ì–û–†–ò–Ø –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
  unknown: {
    statuses: ['UC_IN9DMO'],
    name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å',
    type: 'unknown'
}
};

// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥: —Å—Ç–∞—Ç—É—Å -> –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const STATUS_TO_STAGE = {};
Object.keys(STAGE_CONFIG).forEach(stageKey => {
  const stage = STAGE_CONFIG[stageKey];
  stage.statuses.forEach(status => {
    STATUS_TO_STAGE[status] = {
      key: stageKey,
      ...stage
    };
  });
});

/**
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç —Å —É—á–µ—Ç–æ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
 */
function getPeriodDates(period, startDate, endDate) {
  const now = new Date();
  
  console.log(`üîß –ü–û–õ–£–ß–ï–ù –ó–ê–ü–†–û–°: period="${period}", startDate="${startDate}", endDate="${endDate}"`);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—Ç—ã –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
  function toMoscowDateTime(dateString, isEndOfDay = false) {
    const date = new Date(dateString);
    if (isEndOfDay) {
      date.setHours(23, 59, 59, 999);
    } else {
      date.setHours(0, 0, 0, 0);
    }
    
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    const seconds = String(date.getSeconds()).padStart(2, '0');
    
    return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;
  }
  
  let start, end;
  
  switch (period) {
    case 'today':
      start = toMoscowDateTime(now.toISOString().split('T')[0]);
      end = toMoscowDateTime(now.toISOString().split('T')[0], true);
      break;
      
    case 'yesterday':
      const yesterday = new Date(now);
      yesterday.setDate(now.getDate() - 1);
      start = toMoscowDateTime(yesterday.toISOString().split('T')[0]);
      end = toMoscowDateTime(yesterday.toISOString().split('T')[0], true);
      break;
      
    case 'week':
      const startOfWeek = new Date(now);
      startOfWeek.setDate(now.getDate() - now.getDay() + 1);
      start = toMoscowDateTime(startOfWeek.toISOString().split('T')[0]);
      end = toMoscowDateTime(now.toISOString().split('T')[0], true);
      break;
      
    case 'month':
      const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
      start = toMoscowDateTime(startOfMonth.toISOString().split('T')[0]);
      end = toMoscowDateTime(now.toISOString().split('T')[0], true);
      break;
      
    case 'quarter':
      const currentQuarter = Math.floor(now.getMonth() / 3);
      const quarterStart = new Date(now.getFullYear(), currentQuarter * 3, 1);
      start = toMoscowDateTime(quarterStart.toISOString().split('T')[0]);
      end = toMoscowDateTime(now.toISOString().split('T')[0], true);
      break;
      
    case 'custom':
      if (!startDate || !endDate) {
        console.log('üîß HOTFIX: period=custom –±–µ–∑ –¥–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π');
        const weekStart = new Date(now);
        weekStart.setDate(now.getDate() - 7);
        start = toMoscowDateTime(weekStart.toISOString().split('T')[0]);
        end = toMoscowDateTime(now.toISOString().split('T')[0], true);
      } else {
        start = toMoscowDateTime(startDate);
        end = toMoscowDateTime(endDate, true);
      }
      break;
      
    default:
      console.log(`üîß HOTFIX: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ "${period}", –∏—Å–ø–æ–ª—å–∑—É–µ–º week`);
      const defaultWeekStart = new Date(now);
      defaultWeekStart.setDate(now.getDate() - now.getDay() + 1);
      start = toMoscowDateTime(defaultWeekStart.toISOString().split('T')[0]);
      end = toMoscowDateTime(now.toISOString().split('T')[0], true);
  }
  
  console.log(`üìÖ –ò—Ç–æ–≥–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ "${period}": ${start} ‚Äî ${end}`);
  
  return { start, end };
}

/**
 * üìä –§–£–ù–ö–¶–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ù–ê–ó–í–ê–ù–ò–ô –ò–°–¢–û–ß–ù–ò–ö–û–í
 */
async function getSourceNames() {
  try {
    const sources = await LeadSource.find({}).select('bitrixId name');
    const sourceMap = {};
    sources.forEach(source => {
      sourceMap[source.bitrixId] = source.name;
    });
    return sourceMap;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', error);
    return {};
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ª–∏–¥–æ–≤
 */
async function getSources(req, res) {
  try {
    console.log('üìä –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ª–∏–¥–æ–≤');
    
    const sources = await LeadSource.find({}).sort({ name: 1 });
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${sources.length}`);
    
    res.json({
      success: true,
      data: sources,
      total: sources.length
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ª–∏–¥–æ–≤'
    });
  }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å Bitrix24
 */
async function syncSources(req, res) {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å Bitrix24');
    
    const bitrixSources = await bitrixService.getSources();
    console.log(`üì• –ü–æ–ª—É—á–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–∑ Bitrix24: ${bitrixSources.length}`);
    
    let syncedCount = 0;
    let updatedCount = 0;
    
    for (const source of bitrixSources) {
      try {
        const existingSource = await LeadSource.findOne({ 
          bitrixId: source.ID 
        });
        
        if (existingSource) {
          existingSource.name = source.NAME || `–ò—Å—Ç–æ—á–Ω–∏–∫ ${source.ID}`;
          existingSource.lastSync = new Date();
          await existingSource.save();
          updatedCount++;
        } else {
          await LeadSource.create({
            bitrixId: source.ID,
            name: source.NAME || `–ò—Å—Ç–æ—á–Ω–∏–∫ ${source.ID}`,
            isActive: true,
            lastSync: new Date()
          });
          syncedCount++;
        }
      } catch (itemError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ${source.ID}:`, itemError);
      }
    }
    
    console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${syncedCount} –Ω–æ–≤—ã—Ö, ${updatedCount} –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
    
    res.json({
      success: true,
      message: `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${syncedCount} –Ω–æ–≤—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, ${updatedCount} –æ–±–Ω–æ–≤–ª–µ–Ω–æ`,
      synced: syncedCount,
      updated: updatedCount,
      total: bitrixSources.length
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤'
    });
  }
}

/**
 * –¢–û–ß–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–¥–∏–π –ª–∏–¥–æ–≤
 */
function analyzeLeadStage(lead) {
  const statusId = lead.STATUS_ID;
  const stageInfo = STATUS_TO_STAGE[statusId];
  
  if (!stageInfo) {
    console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ª–∏–¥–∞: ${statusId}`);
    return {
      key: 'unknown',
      name: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${statusId}`,
      type: 'working'
    };
  }
  
  return stageInfo;
}

/**
 * –¢–û–ß–ù–´–ô –ø–æ–¥—Å—á–µ—Ç —Å—Ç–∞–¥–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
 */
function calculateStageAnalysis(leads) {
  const analysis = {
    new: 0,
    distributed: 0,
    inWork: 0,
    communication: 0,
    noResponse: 0,
    longNoCall: 0,
    qualified: 0,
    meetingsScheduled: 0,
    meetingsFailed: 0,
    converted: 0,
    junk: 0,
    unknown: 0
  };
  
  console.log('\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞–¥–∏–π –ª–∏–¥–æ–≤:');
  
  leads.forEach(lead => {
    const stage = analyzeLeadStage(lead);
    if (analysis.hasOwnProperty(stage.key)) {
      analysis[stage.key]++;
      console.log(`  –õ–∏–¥ ${lead.ID}: —Å—Ç–∞—Ç—É—Å "${lead.STATUS_ID}" ‚Üí —Å—Ç–∞–¥–∏—è "${stage.key}" (${stage.name})`);
    } else {
      console.log(`  –õ–∏–¥ ${lead.ID}: —Å—Ç–∞—Ç—É—Å "${lead.STATUS_ID}" ‚Üí –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–∞–¥–∏—è "${stage.key}"`);
    }
  });
  
  console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞–¥–∏—è–º:');
  Object.keys(analysis).forEach(key => {
    if (analysis[key] > 0) {
      console.log(`  ${key}: ${analysis[key]} –ª–∏–¥–æ–≤`);
    }
  });
  
  return analysis;
}

/**
 * üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –°–ß–ò–¢–ê–ï–ú –í–°–¢–†–ï–ß–ò –ü–û –°–¢–ê–¢–£–°–ê–ú –õ–ò–î–û–í
 */
function countMeetingsFromLeadStatus(sourceLeads) {
  const convertedLeads = sourceLeads.filter(lead => 
    lead.STATUS_ID === 'CONVERTED'
  );
  
  console.log(`üìä –í–°–¢–†–ï–ß–ò —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç—É—Å –ª–∏–¥–æ–≤: ${convertedLeads.length}`);
  convertedLeads.forEach((lead, index) => {
    console.log(`  –õ–∏–¥ ${index + 1}: ID ${lead.ID}, —Å—Ç–∞—Ç—É—Å ${lead.STATUS_ID}`);
  });
  
  return convertedLeads.length;
}

/**
 * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ª–∏–¥–æ–≤ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
 */
function groupLeadsBySource(leads) {
  const grouped = {};
  
  leads.forEach(lead => {
    const sourceId = lead.SOURCE_ID || 'NO_SOURCE';
    if (!grouped[sourceId]) {
      grouped[sourceId] = [];
    }
    grouped[sourceId].push(lead);
  });
  
  return grouped;
}

/**
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ª–∏–¥–æ–≤ - –°–ß–ò–¢–ê–ï–ú –í–°–¢–†–ï–ß–ò –ü–û –°–¢–ê–¢–£–°–ê–ú
 */
async function getLeadsAnalytics(req, res) {
  try {
    const startTime = Date.now();
    console.log('üìä –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ª–∏–¥–æ–≤ - –í–°–¢–†–ï–ß–ò –ü–û –°–¢–ê–¢–£–°–ê–ú –õ–ò–î–û–í');
    
    const { period = 'week', sourceId, startDate, endDate } = req.query;
    
    console.log('üîç –í—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', { period, sourceId, startDate, endDate });
    
    const dateRange = getPeriodDates(period, startDate, endDate);
    console.log(`üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: ${dateRange.start} - ${dateRange.end}`);
    
    const filters = {
      '>=DATE_CREATE': dateRange.start,
      '<=DATE_CREATE': dateRange.end
    };
    
    if (sourceId && sourceId !== 'all') {
      filters['SOURCE_ID'] = sourceId;
    }
    
    console.log('üîç –§–∏–ª—å—Ç—Ä—ã –¥–ª—è Bitrix24 —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º:', filters);
    
    // –ü–æ–ª—É—á–∞–µ–º –ª–∏–¥—ã –∏–∑ Bitrix24
    const leads = await bitrixService.getLeads(filters);
    console.log(`üì• –ü–æ–ª—É—á–µ–Ω–æ –ª–∏–¥–æ–≤: ${leads.length}`);
    
    // üîç –í–†–ï–ú–ï–ù–ù–´–ô DEBUG –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –°–¢–†–£–ö–¢–£–†–´ –õ–ò–î–û–í
    if (leads.length > 0) {
      console.log('üîç –ü–û–õ–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ü–ï–†–í–û–ì–û –õ–ò–î–ê:');
      console.log('–í—Å–µ –ø–æ–ª—è –ª–∏–¥–∞:', Object.keys(leads[0]));
      console.log('–ü–æ–ª—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:', {
        ASSIGNED_BY_ID: leads[0].ASSIGNED_BY_ID,
        RESPONSIBLE_USER_ID: leads[0].RESPONSIBLE_USER_ID,
        CREATED_BY_ID: leads[0].CREATED_BY_ID,
        MODIFY_BY_ID: leads[0].MODIFY_BY_ID
      });
    }
    
    // üìä –ü–û–õ–£–ß–ê–ï–ú –ù–ê–ó–í–ê–ù–ò–Ø –ò–°–¢–û–ß–ù–ò–ö–û–í
    const sourceNames = await getSourceNames();
    
    const sourceStats = {};
    leads.forEach(lead => {
      const sourceId = lead.SOURCE_ID || 'NO_SOURCE';
      sourceStats[sourceId] = (sourceStats[sourceId] || 0) + 1;
    });
    console.log('üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:', sourceStats);
    console.log(`‚ùì –õ–∏–¥–æ–≤ –±–µ–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: ${sourceStats['NO_SOURCE'] || 0}`);
    
    if (leads.length === 0) {
      return res.json({
        success: true,
        data: [],
        period: dateRange,
        totalLeads: 0,
        totalMeetingsHeld: 0,
        note: '–õ–∏–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥'
      });
    }
    
    const leadsBySource = groupLeadsBySource(leads);
    console.log(`üìä –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –ª–∏–¥–∞–º–∏: ${Object.keys(leadsBySource).length}`);
    
    const totalLeadsCheck = Object.values(leadsBySource).reduce((sum, leads) => sum + leads.length, 0);
    console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—É—á–µ–Ω–æ ${leads.length} –ª–∏–¥–æ–≤, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ ${totalLeadsCheck} –ª–∏–¥–æ–≤`);
    if (leads.length !== totalLeadsCheck) {
      console.error(`‚ùå –ü–û–¢–ï–†–Ø –î–ê–ù–ù–´–•: ${leads.length - totalLeadsCheck} –ª–∏–¥–æ–≤ –ø–æ—Ç–µ—Ä—è–Ω–æ –ø—Ä–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ!`);
    }
    
    const sourceAnalytics = [];
    const totalLeads = leads.length;
    let totalMeetingsHeld = 0;
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
    let filteredSources = Object.keys(leadsBySource);
    if (sourceId && sourceId !== 'all') {
      const requestedSources = sourceId.split(',');
      filteredSources = filteredSources.filter(id => requestedSources.includes(id));
    }
    
    for (const [currentSourceId, sourceLeads] of Object.entries(leadsBySource)) {
      if (!filteredSources.includes(currentSourceId)) continue;
      
      console.log(`\nüìä –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: ${currentSourceId} (${sourceLeads.length} –ª–∏–¥–æ–≤)`);
      
      // üìù –ü–û–õ–£–ß–ê–ï–ú –ù–ê–ó–í–ê–ù–ò–ï –ò–°–¢–û–ß–ù–ò–ö–ê
      const sourceName = sourceNames[currentSourceId] || `–ò—Å—Ç–æ—á–Ω–∏–∫ ${currentSourceId}`;
      
      const stageAnalysis = calculateStageAnalysis(sourceLeads);
      
      // üéØ –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï - –°–ß–ò–¢–ê–ï–ú –í–°–¢–†–ï–ß–ò –ü–û –°–¢–ê–¢–£–°–ê–ú –õ–ò–î–û–í
      const meetingsHeld = countMeetingsFromLeadStatus(sourceLeads);
      
      const meetingsScheduled = stageAnalysis.meetingsScheduled;
      const communication = stageAnalysis.communication + stageAnalysis.noResponse + stageAnalysis.longNoCall;
      const qualified = stageAnalysis.qualified;
      const junk = stageAnalysis.junk;
      const under250k = sourceLeads.length;
      
      // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ù–ê–ó–ù–ê–ß–ï–ù–ù–´–• –í–°–¢–†–ï–ß
      // –í—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ = —Å—Ç–∞—Ç—É—Å "–Ω–∞–∑–Ω–∞—á–µ–Ω–∞" + –≤—Å–µ —Å–æ—Å—Ç–æ—è–≤—à–∏–µ—Å—è (—Ç–∞–∫ –∫–∞–∫ —Å–æ—Å—Ç–æ—è–≤—à–∏–µ—Å—è –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã)
      const meetingsScheduledTotal = meetingsScheduled + meetingsHeld;
      
      // –ö–æ–Ω–≤–µ—Ä—Å–∏—è –∏–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –≤ —Å–æ—Å—Ç–æ—è–≤—à—É—é—Å—è
      const meetingsHeldFromScheduledConversion = meetingsScheduledTotal > 0 
        ? ((meetingsHeld / meetingsScheduledTotal) * 100).toFixed(1)
        : '0.0';
      
      const analytics = {
        sourceId: currentSourceId,
        sourceName,
        totalLeads: sourceLeads.length,
        meetingsHeld, // üéØ –¢–µ–ø–µ—Ä—å –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –ª–∏–¥–æ–≤!
        comments: communication,
        commentsConversion: sourceLeads.length > 0 ? ((communication / sourceLeads.length) * 100).toFixed(1) : '0.0',
        qualified,
        qualifiedConversion: sourceLeads.length > 0 ? ((qualified / sourceLeads.length) * 100).toFixed(1) : '0.0',
        meetingsScheduled: meetingsScheduledTotal, // –ò–°–ü–†–ê–í–õ–ï–ù–û!
        meetingsScheduledConversion: sourceLeads.length > 0 ? ((meetingsScheduledTotal / sourceLeads.length) * 100).toFixed(1) : '0.0',
        meetingsHeldConversion: sourceLeads.length > 0 ? ((meetingsHeld / sourceLeads.length) * 100).toFixed(1) : '0.0',
        meetingsHeldFromScheduledConversion, // –ù–û–í–ê–Ø –º–µ—Ç—Ä–∏–∫–∞
        junk,
        junkPercent: sourceLeads.length > 0 ? ((junk / sourceLeads.length) * 100).toFixed(1) : '0.0',
        under250k,
        under250kPercent: sourceLeads.length > 0 ? ((under250k / sourceLeads.length) * 100).toFixed(1) : '0.0',
        stageAnalysis: {
          new: stageAnalysis.new,
          qualified: stageAnalysis.qualified,
          converted: stageAnalysis.converted,
          communication: communication,
          meetingsScheduled: stageAnalysis.meetingsScheduled,
          junk: stageAnalysis.junk,
          unknown: stageAnalysis.unknown
        }
      };
      
      sourceAnalytics.push(analytics);
      totalMeetingsHeld += meetingsHeld;
      
      console.log(`üìä –ò–¢–û–ì–û–í–´–ï –ú–ï–¢–†–ò–ö–ò –¥–ª—è "${analytics.sourceName}":
  –í—Å–µ–≥–æ –ª–∏–¥–æ–≤: ${analytics.totalLeads}
  –í—Å—Ç—Ä–µ—á–∏ —Å–æ—Å—Ç–æ—è–ª–∏—Å—å: ${meetingsHeld} ‚Üê –ü–û –°–¢–ê–¢–£–°–ê–ú –õ–ò–î–û–í!
  –í—Å—Ç—Ä–µ—á–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã: ${meetingsScheduledTotal}
  CR –∏–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –≤ —Å–æ—Å—Ç–æ—è–≤—à—É—é—Å—è: ${meetingsHeldFromScheduledConversion}%
  –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: ${stageAnalysis.converted}
  –ë—Ä–∞–∫: ${junk}`);
    }
    
    const processingTime = Date.now() - startTime;
    console.log(`‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∑–∞ ${processingTime}ms`);
    console.log(`üìä –ò–¢–û–ì–û –ü–û –í–°–ï–ú –ò–°–¢–û–ß–ù–ò–ö–ê–ú: ${totalLeads} –ª–∏–¥–æ–≤, ${totalMeetingsHeld} –≤—Å—Ç—Ä–µ—á`);
    
    res.json({
      success: true,
      data: sourceAnalytics,
      period: dateRange,
      totalLeads,
      totalMeetingsHeld, // üéØ –¢–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 36!
      processingTime,
      note: `–ê–Ω–∞–ª–∏–∑ ${totalLeads} –ª–∏–¥–æ–≤ –∏–∑ ${sourceAnalytics.length} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–≤—Å—Ç—Ä–µ—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –ª–∏–¥–æ–≤)`,
      debug: {
        filters,
        requestedSources: sourceId || 'all',
        actualPeriod: period,
        dateRange,
        contractFunnelId: '31',
        totalLeadsReceived: leads.length,
        totalLeadsCounted: totalLeads,
        leadsWithoutSource: sourceStats['NO_SOURCE'] || 0,
        
        // üîç –†–ê–°–®–ò–†–ï–ù–ù–´–ô DEBUG –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –°–¢–†–£–ö–¢–£–†–´ –õ–ò–î–û–í
        fullLeadStructure: leads.length > 0 ? Object.keys(leads[0]) : [],
        
        sampleLeads: leads.slice(0, 3).map(lead => ({
          id: lead.ID,
          sourceId: lead.SOURCE_ID,
          statusId: lead.STATUS_ID,
          sourceName: lead.SOURCE_DESCRIPTION || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          contactId: lead.CONTACT_ID,
          // üéØ –ü–û–õ–Ø –î–õ–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ò –°–û–¢–†–£–î–ù–ò–ö–û–í
          assignedById: lead.ASSIGNED_BY_ID,
          responsibleUserId: lead.RESPONSIBLE_USER_ID,
          createdById: lead.CREATED_BY_ID,
          modifiedById: lead.MODIFY_BY_ID,
          dateCreate: lead.DATE_CREATE,
          dateModify: lead.DATE_MODIFY
        })),
        
        meetingsBreakdown: sourceAnalytics.slice(0, 5).map(item => ({
          sourceName: item.sourceName,
          totalLeads: item.totalLeads,
          meetingsHeld: item.meetingsHeld,
          meetingsScheduled: item.meetingsScheduled,
          meetingsHeldConversion: item.meetingsHeldConversion,
          meetingsHeldFromScheduledConversion: item.meetingsHeldFromScheduledConversion
        }))
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ª–∏–¥–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ª–∏–¥–æ–≤'
    });
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–π –ª–∏–¥–æ–≤ —Å –¢–û–ß–ù–´–ú–ò —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏–∑ API
 */
async function getLeadStages(req, res) {
  try {
    console.log('üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞–¥–∏–π –ª–∏–¥–æ–≤');
    
    const stages = {};
    
    Object.keys(STAGE_CONFIG).forEach(stageKey => {
      const stage = STAGE_CONFIG[stageKey];
      stage.statuses.forEach(status => {
        stages[status] = stage.name;
      });
    });
    
    console.log(`‚úÖ –°—Ç–∞–¥–∏–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: ${Object.keys(stages).length}`);
    console.log('üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤:');
    Object.keys(stages).forEach(statusId => {
      console.log(`  ${statusId}: ${stages[statusId]}`);
    });
    
    res.json({
      success: true,
      data: stages,
      total: Object.keys(stages).length,
      note: '–°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ —Ç–æ—á–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API Bitrix24'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–¥–∏–π –ª–∏–¥–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–¥–∏–π –ª–∏–¥–æ–≤'
    });
  }
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ID –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –ª–∏–¥–∞—Ö
 */
async function fixSourceIds(req, res) {
  try {
    console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SOURCE_ID –≤ –ª–∏–¥–∞—Ö');
    
    const leads = await bitrixService.getLeads({});
    console.log(`üì• –ü–æ–ª—É—á–µ–Ω–æ –ª–∏–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${leads.length}`);
    
    let fixedCount = 0;
    const errors = [];
    
    for (const lead of leads) {
      try {
        if (!lead.SOURCE_ID && lead.SOURCE_DESCRIPTION) {
          const match = lead.SOURCE_DESCRIPTION.match(/\d+/);
          if (match) {
            const sourceId = match[0];
            
            await bitrixService.updateLead(lead.ID, {
              SOURCE_ID: sourceId
            });
            
            fixedCount++;
            console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ª–∏–¥ ${lead.ID}: SOURCE_ID = ${sourceId}`);
          }
        }
      } catch (itemError) {
        errors.push({
          leadId: lead.ID,
          error: itemError.message
        });
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥–∞ ${lead.ID}:`, itemError);
      }
    }
    
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${fixedCount} –ª–∏–¥–æ–≤`);
    
    res.json({
      success: true,
      message: `–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedCount} –ª–∏–¥–æ–≤`,
      fixed: fixedCount,
      errors: errors.length,
      errorDetails: errors.slice(0, 10)
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è SOURCE_ID:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è SOURCE_ID –≤ –ª–∏–¥–∞—Ö'
    });
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ—Ä–æ–Ω–æ–∫ —Å–¥–µ–ª–æ–∫
 */
async function getDealCategories(req, res) {
  try {
    console.log('üìä –ó–∞–ø—Ä–æ—Å –≤–æ—Ä–æ–Ω–æ–∫ —Å–¥–µ–ª–æ–∫');
    
    const categories = await bitrixService.getDealCategories();
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –≤–æ—Ä–æ–Ω–æ–∫: ${categories.length}`);
    
    res.json({
      success: true,
      data: categories,
      total: categories.length
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ—Ä–æ–Ω–æ–∫ —Å–¥–µ–ª–æ–∫:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ—Ä–æ–Ω–æ–∫ —Å–¥–µ–ª–æ–∫'
    });
  }
}

/**
 * üë• –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ò –°–û–¢–†–£–î–ù–ò–ö–û–í
 * –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü dashboardController.js (–ø–µ—Ä–µ–¥ module.exports)
 */

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ Bitrix24 —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
async function getEmployeeNames() {
  try {
    console.log('üë• –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ Bitrix24');
    const users = await bitrixService.getUsers();
    const employeeMap = {};
    
    users.forEach(user => {
      employeeMap[user.ID] = {
        id: user.ID,
        name: `${user.NAME || ''} ${user.LAST_NAME || ''}`.trim() || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.ID}`,
        email: user.EMAIL || '',
        position: user.WORK_POSITION || '',
        active: user.ACTIVE === 'Y'
      };
    });
    
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${Object.keys(employeeMap).length}`);
    return employeeMap;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', error);
    return {};
  }
}

/**
 * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ª–∏–¥–æ–≤ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
 */
function groupLeadsByEmployee(leads) {
  const grouped = {};
  
  leads.forEach(lead => {
    const employeeId = lead.ASSIGNED_BY_ID || 'NO_EMPLOYEE';
    if (!grouped[employeeId]) {
      grouped[employeeId] = [];
    }
    grouped[employeeId].push(lead);
  });
  
  return grouped;
}

/**
 * –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
 */
function analyzeEmployeeSources(employeeLeads, sourceNames) {
  const sourceStats = {};
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ª–∏–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
  employeeLeads.forEach(lead => {
    const sourceId = lead.SOURCE_ID || 'NO_SOURCE';
    if (!sourceStats[sourceId]) {
      sourceStats[sourceId] = [];
    }
    sourceStats[sourceId].push(lead);
  });
  
  const sourceAnalytics = [];
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  Object.entries(sourceStats).forEach(([sourceId, sourceLeads]) => {
    const sourceName = sourceNames[sourceId] || `–ò—Å—Ç–æ—á–Ω–∏–∫ ${sourceId}`;
    const stageAnalysis = calculateStageAnalysis(sourceLeads);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
    const meetingsHeld = countMeetingsFromLeadStatus(sourceLeads);
    const meetingsScheduled = stageAnalysis.meetingsScheduled;
    const communication = stageAnalysis.communication + stageAnalysis.noResponse + stageAnalysis.longNoCall;
    const qualified = stageAnalysis.qualified;
    const junk = stageAnalysis.junk;
    
    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á
    const meetingsScheduledTotal = meetingsScheduled + meetingsHeld;
    
    // –ö–æ–Ω–≤–µ—Ä—Å–∏–∏
    const meetingsHeldFromScheduledConversion = meetingsScheduledTotal > 0 
      ? ((meetingsHeld / meetingsScheduledTotal) * 100).toFixed(1)
      : '0.0';
    
    sourceAnalytics.push({
      sourceId,
      sourceName,
      totalLeads: sourceLeads.length,
      comments: communication,
      commentsConversion: sourceLeads.length > 0 ? ((communication / sourceLeads.length) * 100).toFixed(1) : '0.0',
      qualified,
      qualifiedConversion: sourceLeads.length > 0 ? ((qualified / sourceLeads.length) * 100).toFixed(1) : '0.0',
      meetingsScheduled: meetingsScheduledTotal,
      meetingsScheduledConversion: sourceLeads.length > 0 ? ((meetingsScheduledTotal / sourceLeads.length) * 100).toFixed(1) : '0.0',
      meetingsHeld,
      meetingsHeldConversion: sourceLeads.length > 0 ? ((meetingsHeld / sourceLeads.length) * 100).toFixed(1) : '0.0',
      meetingsHeldFromScheduledConversion,
      junk,
      junkPercent: sourceLeads.length > 0 ? ((junk / sourceLeads.length) * 100).toFixed(1) : '0.0'
    });
  });
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–∏–¥–æ–≤ (—É–±—ã–≤–∞–Ω–∏–µ)
  return sourceAnalytics.sort((a, b) => b.totalLeads - a.totalLeads);
}

/**
 * üéØ –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –ê–ù–ê–õ–ò–¢–ò–ö–ê –ü–û –°–û–¢–†–£–î–ù–ò–ö–ê–ú
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¢–ï –ñ–ï —Ñ–∏–ª—å—Ç—Ä—ã —á—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
 */
async function getEmployeesAnalytics(req, res) {
  try {
    const startTime = Date.now();
    console.log('üë• –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º');
    
    // üéØ –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–ï –ñ–ï –ü–ê–†–ê–ú–ï–¢–†–´ —á—Ç–æ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
    const { period = 'week', sourceId, startDate, endDate, employeeId } = req.query;
    
    console.log('üîç –í—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', { 
      period, sourceId, startDate, endDate, employeeId 
    });
    
    const dateRange = getPeriodDates(period, startDate, endDate);
    console.log(`üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${dateRange.start} - ${dateRange.end}`);
    
    // üéØ –¢–ï –ñ–ï –§–ò–õ–¨–¢–†–´ —á—Ç–æ –∏ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    const filters = {
      '>=DATE_CREATE': dateRange.start,
      '<=DATE_CREATE': dateRange.end
    };
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ)
    if (sourceId && sourceId !== 'all') {
      if (sourceId.includes(',')) {
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        const sourceIds = sourceId.split(',');
        console.log(`üîç –§–∏–ª—å—Ç—Ä –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º: ${sourceIds.join(', ')}`);
        // Bitrix24 –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –º–∞—Å—Å–∏–≤—ã –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö, –ø–æ—ç—Ç–æ–º—É –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å–ª–µ
      } else {
        filters['SOURCE_ID'] = sourceId;
      }
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    if (employeeId && employeeId !== 'all') {
      filters['ASSIGNED_BY_ID'] = employeeId;
    }
    
    console.log('üîç –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', filters);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const [leads, employeeNames, sourceNames] = await Promise.all([
      bitrixService.getLeads(filters),
      getEmployeeNames(),
      getSourceNames()
    ]);
    
    console.log(`üì• –ü–æ–ª—É—á–µ–Ω–æ –ª–∏–¥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${leads.length}`);
    console.log(`üë• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ —Å–∏—Å—Ç–µ–º—ã: ${Object.keys(employeeNames).length}`);
    
    // üéØ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û –ò–°–¢–û–ß–ù–ò–ö–ê–ú (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ)
    let filteredLeads = leads;
    if (sourceId && sourceId !== 'all' && sourceId.includes(',')) {
      const sourceIds = sourceId.split(',');
      filteredLeads = leads.filter(lead => sourceIds.includes(lead.SOURCE_ID));
      console.log(`üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏–¥–æ–≤: ${filteredLeads.length}`);
    }
    
    if (filteredLeads.length === 0) {
      return res.json({
        success: true,
        data: [],
        period: dateRange,
        totalLeads: 0,
        totalEmployees: 0,
        totalMeetingsHeld: 0,
        note: '–õ–∏–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤'
      });
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ª–∏–¥—ã –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
    const leadsByEmployee = groupLeadsByEmployee(filteredLeads);
    console.log(`üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –ª–∏–¥–∞–º–∏: ${Object.keys(leadsByEmployee).length}`);
    
    const employeeAnalytics = [];
    let totalMeetingsHeld = 0;
    let totalLeadsCount = 0;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    for (const [currentEmployeeId, employeeLeads] of Object.entries(leadsByEmployee)) {
      if (currentEmployeeId === 'NO_EMPLOYEE') continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏–¥—ã –±–µ–∑ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
      
      console.log(`\nüë§ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ${currentEmployeeId} (${employeeLeads.length} –ª–∏–¥–æ–≤)`);
      
      const employee = employeeNames[currentEmployeeId] || {
        id: currentEmployeeId,
        name: `–°–æ—Ç—Ä—É–¥–Ω–∏–∫ ${currentEmployeeId}`,
        email: '',
        position: '',
        active: true
      };
      
      // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
      const stageAnalysis = calculateStageAnalysis(employeeLeads);
      const employeeMeetingsHeld = countMeetingsFromLeadStatus(employeeLeads);
      const employeeMeetingsScheduled = stageAnalysis.meetingsScheduled + employeeMeetingsHeld;
      const employeeCommunication = stageAnalysis.communication + stageAnalysis.noResponse + stageAnalysis.longNoCall;
      const employeeJunk = stageAnalysis.junk;
      
      // –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
      const sourceAnalytics = analyzeEmployeeSources(employeeLeads, sourceNames);
      
      const employeeData = {
        employee: {
          id: currentEmployeeId,
          name: employee.name,
          email: employee.email,
          position: employee.position,
          active: employee.active,
          totalLeads: employeeLeads.length,
          totalMeetingsHeld: employeeMeetingsHeld,
          totalMeetingsScheduled: employeeMeetingsScheduled,
          totalCommunication: employeeCommunication,
          totalJunk: employeeJunk,
          overallConversion: employeeLeads.length > 0 ? ((employeeMeetingsHeld / employeeLeads.length) * 100).toFixed(1) : '0.0',
          meetingsFromScheduledConversion: employeeMeetingsScheduled > 0 ? ((employeeMeetingsHeld / employeeMeetingsScheduled) * 100).toFixed(1) : '0.0'
        },
        sources: sourceAnalytics
      };
      
      employeeAnalytics.push(employeeData);
      totalMeetingsHeld += employeeMeetingsHeld;
      totalLeadsCount += employeeLeads.length;
      
      console.log(`üë§ –ò–¢–û–ì–ò –¥–ª—è "${employee.name}":
  –õ–∏–¥–æ–≤: ${employeeLeads.length}
  –í—Å—Ç—Ä–µ—á: ${employeeMeetingsHeld}
  –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${sourceAnalytics.length}
  –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${employeeData.employee.overallConversion}%`);
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—Å—Ç—Ä–µ—á (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    employeeAnalytics.sort((a, b) => b.employee.totalMeetingsHeld - a.employee.totalMeetingsHeld);
    
    const processingTime = Date.now() - startTime;
    console.log(`‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∑–∞ ${processingTime}ms`);
    console.log(`üë• –ò–¢–û–ì–û: ${employeeAnalytics.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, ${totalLeadsCount} –ª–∏–¥–æ–≤, ${totalMeetingsHeld} –≤—Å—Ç—Ä–µ—á`);
    
    res.json({
      success: true,
      data: employeeAnalytics,
      period: dateRange,
      totalLeads: totalLeadsCount,
      totalEmployees: employeeAnalytics.length,
      totalMeetingsHeld,
      averageConversion: totalLeadsCount > 0 ? ((totalMeetingsHeld / totalLeadsCount) * 100).toFixed(1) : '0.0',
      processingTime,
      note: `–ê–Ω–∞–ª–∏–∑ ${employeeAnalytics.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å ${totalLeadsCount} –ª–∏–¥–∞–º–∏`,
      debug: {
        filters,
        dateRange,
        // üéØ –î–û–ë–ê–í–õ–ï–ù–û: actualPeriod –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å frontend
        actualPeriod: period === 'custom' ? `${startDate} ‚Äî ${endDate}` : period,
        originalLeadsCount: leads.length,
        filteredLeadsCount: filteredLeads.length,
        totalEmployeesInSystem: Object.keys(employeeNames).length,
        employeesWithLeads: employeeAnalytics.length,
        leadsWithoutEmployee: leadsByEmployee['NO_EMPLOYEE']?.length || 0,
        appliedFilters: {
          period,
          sourceId: sourceId || 'all',
          employeeId: employeeId || 'all'
        }
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º'
    });
  }
}


module.exports = {
  getSources,
  syncSources,
  getLeadsAnalytics,
  getEmployeesAnalytics,
  getLeadStages,
  fixSourceIds,
  getDealCategories
};